return(
length(which(result==FALSE)) > 0
)
}
# Paso 05: Cree una columna “outliermediana” (booleana) = TRUE cuando uno
# de los valores de la fila está fuera del rango
# (mediana+-1.5*(Q3-Q1)), para su columna)
# * Ojo, necesitará calcular las medianas, Q1 y Q3 de cada columna
# se calcula la mediana, q1 y q3 de cada columna una sola vez
temp2 = matrix(0, 4, total_columnas_filtered)
temp2[2,]=apply(filtered_dataset, apply_to_columns, median) #mediana de todas las columnas
temp2[3,]=apply(filtered_dataset, apply_to_columns, function(col) quantile(col, 0.25) ) #q1
temp2[4,]=apply(filtered_dataset, apply_to_columns, function(col) quantile(col, 0.75) ) #q3
evaluateRow2 <- function(x) {
x1 = x[1]
median = x[2]
q1 = x[3]
q3 = x[4]
condicion_valida = x1 >= (median-1.5*(q3-q1)) && x1 <= (median+1.5*(q3-q1))
return(condicion_valida)
}
outliermediana <- function(x) {
temp2[1,] = x
#evaluar todas las columnas de la fila actual aplicando la funcion evaluateRow
#result contiene un array de TRUE o FALSE
result = apply(temp2, apply_to_columns, function(x) evaluateRow2(x))
return(
length(which(result==FALSE)) > 0
)
}
#aplicar transformaciones
outliermediaResult = apply(filtered_dataset, apply_to_rows, function(row) outliermedia(row))
outliermedianaResult = apply(filtered_dataset, apply_to_rows, function(row) outliermediana(row))
#juntar
filtered_dataset$outlier_media = outliermediaResult
filtered_dataset$outlier_mediana = outliermedianaResult
# Paso 06: Utilice la función lofactor (paquete: DMwR) con k=5
# y establezca el umbral que considere apropiado, razone por qué.
# (Lea la documentación y) Responda a lo siguiente: ¿Qué pasaría si k=1?, ¿y si k=100?
#k representa el numero de vecinos que se usaran para calcular si el dato observado, es un outlier.
# si se escoge un valor de k muy bajo, como 1, solo se mirara el vecino mas cercano, por lo que la precision del
# modelo se ve reducida y el modelo seguiria teniendo outliers. En el caso contrario, con un valor muy alto como 100,
# el modelo, compara cada dato observado con sus 100 vecinos mas cercanos, que para este dataset, supone compararlo con 1/3 del dataset
# Lo que tampoco serviria para reducir o eliminar los outliers, por el hecho de calcular la densidad con demasiados elementos
# A la hora de calcular clusters, una de tantas medidas para predefinir cuantos grupos crear dado un dataset, es sqrt(length(dataset)), e decir
# la raiz cuadrada del numero total de elementos disponibles, lo que en este caso seria, k=18
k_value = 5
scores = lofactor(filtered_dataset, k_value)
lofactor_threshold = mean(scores)+3*sd(scores) #our threshold value. 99% confidence
plot(density(scores))
# Paso 07: Cree una columna "outlierlofactor" (booleana) = TRUE cuando
# el valor devuelto por la función lofactor es mayor que el umbral fijado
filtered_dataset$outlier_lofactor = ifelse( scores > lofactor_threshold, "TRUE", "FALSE")
# Paso 08: Cree 3 gráficos utilizando la función ggpairs (paquete GGally) sobre los datos
# Cada uno de ellos utilizando una de las columnas "outlierXXX" para darle color
#pintar todas las columnas salvo las boolenas
numero_col_bool = 3
ultima_col_pintable = (ncol(filtered_dataset)-numero_col_bool)
pm <- ggpairs(
filtered_dataset,
mapping = aes(color = outlier_lofactor),
columns=1:ultima_col_pintable,
title = "GG PAIRS: Outlier lofactor"
)
pm
filtered_dataset$outlier_medianaColor = ifelse( filtered_dataset$outlier_mediana, "TRUE", "FALSE")
pm2 <- ggpairs(
filtered_dataset,
mapping = aes(color = outlier_medianaColor),
columns=1:ultima_col_pintable,
title = "GG PAIRS: Outlier mediana"
)
pm2
filtered_dataset$outlier_mediaColor = ifelse( filtered_dataset$outlier_media, "TRUE", "FALSE")
pm3 <- ggpairs(
filtered_dataset,
mapping = aes(color = outlier_mediaColor),
columns=1:ultima_col_pintable,
title = "GG PAIRS: Outlier media"
)
pm3
# Paso 09: Comente cuáles han sido las dificultades encontradas para afrontar esta práctica y cómo las ha resuelto
# La mayor dificultad que he tenido ha sido a la hora de buscar una forma de iterar
# sobre las filas que a suvez tenian que iterar sobre las columnas para calcular los valores pedidos
rm(list = ls());cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(ggplot2)
library(GGally)
library(reshape)
library(corrplot)
apply_to_rows = 1
apply_to_columns = 2
dataset = read.csv("crx.csv")
dataset[ (dataset == '?') ] = NA
max_variables = 5
View(dataset)
summary(dataset)
(dataset == '?')
dataset = read.csv("crx.csv")
(dataset == '?')
rm(list = ls());cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(ggplot2)
library(GGally)
library(reshape)
library(corrplot)
apply_to_rows = 1
apply_to_columns = 2
dataset = read.csv("crx.csv")
dataset[ (dataset == '?') ] = NA
summary(dataset)
View(dataset)
dataset=NULL
dataset = read.csv("crx.csv")
summary(dataset)
dataset == '?'
summary(dataset)
dataset == '?'
summary(dataset == '?')
rm(list = ls());cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(ggplot2)
library(GGally)
library(reshape)
library(corrplot)
apply_to_rows = 1
apply_to_columns = 2
dataset = read.csv("crx.csv")
dataset[ (dataset == '?') ] = NA
summary(dataset)
max_variables = 5
numeric_colums = sapply(dataset, is.numeric)
dataset[ (dataset == '?') ]
correlate(dataset)
install.packages(lsr)
install.packages("lsr')
''
''
'
rm(list = ls());cat("\014")
install.packages("lsr")
correlate(dataset)
library(lsr)
correlate(dataset)
corrplot(correlata(dataset), type="lower", method="circle" , order="hclust")
corrplot(correlate(dataset), type="lower", method="circle" , order="hclust")
two = correlate(dataset)
rm(list = ls());cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(ggplot2)
library(GGally)
library(reshape)
library(corrplot)
apply_to_rows = 1
apply_to_columns = 2
dataset = read.csv("crx.csv")
dataset[ (dataset == '?') ] = NA
summary(dataset)
max_variables = 5
numeric_colums = sapply(dataset, is.numeric)
numeric_colums_index = which(numeric_colums)
dataset_numeric_only = dataset[numeric_colums_index]
correlation_data = cor(dataset_numeric_only)
correlation_data
corrplot(correlation_data, type="lower", method="circle" , order="hclust")
correlation_data[correlation_data == 1] <- NA
items_a_borrar = upper.tri(correlation_data, TRUE)
correlation_data[ items_a_borrar ] = NA
correlation_data = na.omit(melt(correlation_data))
correlation_data$value = abs(correlation_data$value)
correlation_data = correlation_data[order(correlation_data$value),]
correlation_data
correlation_data = correlation_data[-order(correlation_data$value),]
correlation_data
corrplot(correlation_data, type="lower", method="circle" , order="hclust")
correlation_data[correlation_data == 1] <- NA
items_a_borrar = upper.tri(correlation_data, TRUE)
correlation_data[ items_a_borrar ] = NA
correlation_data = na.omit(melt(correlation_data))
correlation_data$value = abs(correlation_data$value)
correlation_data = correlation_data[-order(correlation_data$value),]
rm(list = ls());cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(ggplot2)
library(GGally)
library(reshape)
library(corrplot)
apply_to_rows = 1
apply_to_columns = 2
dataset = read.csv("crx.csv")
dataset[ (dataset == '?') ] = NA
summary(dataset)
max_variables = 5
numeric_colums = sapply(dataset, is.numeric)
numeric_colums_index = which(numeric_colums)
dataset_numeric_only = dataset[numeric_colums_index]
correlation_data = cor(dataset_numeric_only)
correlation_data
corrplot(correlation_data, type="lower", method="circle" , order="hclust")
correlation_data[correlation_data == 1] <- NA
items_a_borrar = upper.tri(correlation_data, TRUE)
correlation_data[ items_a_borrar ] = NA
correlation_data = na.omit(melt(correlation_data))
correlation_data$value = abs(correlation_data$value)
correlation_data = correlation_data[-order(correlation_data$value),]
correlation_data
correlation_data = correlation_data[order(,correlation_data$value)]
order(correlation_data$value)
correlation_data
correlation_data = cor(dataset_numeric_only)
correlation_data
correlation_data
corrplot(correlation_data, type="lower", method="circle" , order="hclust")
correlation_data[correlation_data == 1] <- NA
items_a_borrar = upper.tri(correlation_data, TRUE)
correlation_data[ items_a_borrar ] = NA
correlation_data = na.omit(melt(correlation_data))
correlation_data$value = abs(correlation_data$value)
correlation_data
correlation_data[order(correlation_data$value)]
items_a_borrar = upper.tri(correlation_data, TRUE)
correlation_data[ items_a_borrar ] = NA
correlation_data = na.omit(melt(correlation_data))
correlation_data$value = abs(correlation_data$value)
correlation_data
max_variables = 5
numeric_colums = sapply(dataset, is.numeric)
numeric_colums_index = which(numeric_colums)
dataset_numeric_only = dataset[numeric_colums_index]
correlation_data = cor(dataset_numeric_only)
correlation_data
corrplot(correlation_data, type="lower", method="circle" , order="hclust")
correlation_data[correlation_data == 1] <- NA
items_a_borrar = upper.tri(correlation_data, TRUE)
correlation_data[ items_a_borrar ] = NA
correlation_data = na.omit(melt(correlation_data))
correlation_data$value = abs(correlation_data$value)
correlation_data
correlation_data$value
order(correlation_data$value)
-order(correlation_data$value)
order(-correlation_data$value)
correlation_data[order(-correlation_data$value)]
correlation_data
correlation_data[order(-correlation_data$value),]
rm(list = ls());cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(ggplot2)
library(GGally)
library(reshape)
library(corrplot)
apply_to_rows = 1
apply_to_columns = 2
dataset = read.csv("crx.csv")
dataset[ (dataset == '?') ] = NA
summary(dataset)
max_variables = 5
numeric_colums = sapply(dataset, is.numeric)
numeric_colums_index = which(numeric_colums)
dataset_numeric_only = dataset[numeric_colums_index]
correlation_data = cor(dataset_numeric_only)
correlation_data
corrplot(correlation_data, type="lower", method="circle" , order="hclust")
correlation_data[correlation_data == 1] <- NA
items_a_borrar = upper.tri(correlation_data, TRUE)
correlation_data[ items_a_borrar ] = NA
correlation_data = na.omit(melt(correlation_data))
correlation_data$value = abs(correlation_data$value)
correlation_data = correlation_data[order(-correlation_data$value),]
correlation_data
top_correlated = correlation_data[1:max_variables,]
print("Top correlated variables")
top_correlated
showAttributeData <- function(columnData) {
if(is.numeric(columnData)){
#columna de datos numericos
print ( paste("Media: ", mean(columnData), "Mediana: ", median(columnData)), "Q1: ", quantile(columnData, 0.25), "Q3: ", quantile(columnData, 0.75) );
}
else{
#columna de datos numericos
print ( paste("Numero de valores numericos: ", length( unique(columnData) )) );
}
}
ret = apply(dataset, apply_to_columns, showAttributeData)
dataset
dataset[1]
as.numeric(dataset[1])
na.omit(dataset[1])
summary(na.omit(dataset[1]))
col = summary(na.omit(dataset[1]))
col
col = na.omit(dataset[1])
col
is.numeric(col)
summary(col)
col = na.omit(dataset[2])
col
is.numeric(col)
is.numeric(as.numeric(col))
is.numeric(as.double(col))
is.double(as.double(col))
as.double(col)
col
summary(col)
View(dataset)
View(correlation_data)
summary(dataset)
rm(list = ls());cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(ggplot2)
library(GGally)
library(reshape)
library(corrplot)
apply_to_rows = 1
apply_to_columns = 2
dataset = read.csv("crx.csv")
dataset[ (dataset == '?') ] = NA
na.omit(dataset)
rm(list = ls());cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(ggplot2)
library(GGally)
library(reshape)
library(corrplot)
apply_to_rows = 1
apply_to_columns = 2
dataset = read.csv("crx.csv")
dataset[ (dataset == '?') ] = NA
dataset = na.omit(dataset)
summary(dataset)
max_variables = 5
numeric_colums = sapply(dataset, is.numeric)
numeric_colums_index = which(numeric_colums)
sapply(dataset, is.numeric)
sapply(dataset, is.double)
sapply(dataset, is.numeric) || sapply(dataset, is.double)
sapply(dataset, is.numeric || is.double)
sapply(dataset, function(x) return(is.numeric(x) || is.double(x)) )
numeric_colums = sapply(dataset, function(x) return(is.numeric(x) || is.double(x)) )
numeric_colums_index = which(numeric_colums)
View(dataset)
which(dataset)
which(is.double(dataset))
col()
col
dataset[1]
dataset[2]
col = dataset[2]
is.double(col)
transform(d, char = as.numeric(col))
transform(col, char = as.numeric(col))
transform(col, double = as.numeric(col))
sapply(col2, as.double)
sapply(col, as.double)
View(col)
is.double(col)
sapply(col, as.double)
col = sapply(col, as.double)
is.double(col)
sapply(col, as.double)
sapply(dataset[1], as.double)
sapply(dataset[2], as.double)
sapply(dataset[3], as.double)
sapply(dataset[4], as.double)
sapply(dataset[4], as.double)
dataset[4]
dataset[ (dataset == '?') ] = NA
dataset = na.omit(dataset)
summary(dataset)
max_variables = 5
dataset[2] = sapply(dataset[2], as.double)
numeric_colums = sapply(dataset, is.numeric )
numeric_colums_index = which(numeric_colums)
dataset_numeric_only = dataset[numeric_colums_index]
correlation_data = cor(dataset_numeric_only)
View(dataset_numeric_only)
rm(list = ls());cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(ggplot2)
library(GGally)
library(reshape)
library(corrplot)
apply_to_rows = 1
apply_to_columns = 2
dataset = read.csv("crx.csv")
dataset[2] = sapply(dataset[2], as.double(as.character))
dataset[2] = sapply(dataset[2], function(x)as.double(as.character(x)))
library(corrplot)
apply_to_rows = 1
apply_to_columns = 2
dataset = read.csv("crx.csv")
dataset[ (dataset == '?') ] = NA
dataset = na.omit(dataset)
summary(dataset)
max_variables = 5
dataset[2] = sapply(dataset[2], function(x)as.double(as.character(x)))
dataset = sapply(dataset, function(x)as.double(as.character(x)))
dataset = apply(dataset, apply_to_columns, function(x)as.double(as.character(x)))
rm(list = ls());cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(ggplot2)
library(GGally)
library(reshape)
library(corrplot)
apply_to_rows = 1
apply_to_columns = 2
dataset = read.csv("crx.csv")
dataset[ (dataset == '?') ] = NA
dataset = na.omit(dataset)
summary(dataset)
max_variables = 5
convert_columns <- function(column){
#intentamos procesar la columna como double
column_data_as_double = as.double(as.character(x))
na_count = sum(is.na(column_data_as_double))
if(na_count > 0){
#la columna no es double. no se hace nada
return(column)
}
else{
return(column_data_as_double)
}
}
dataset = apply(dataset, apply_to_columns, convert_columns)
convert_columns <- function(column){
#intentamos procesar la columna como double
column_data_as_double = as.double(as.character(column))
na_count = sum(is.na(column_data_as_double))
if(na_count > 0){
#la columna no es double. no se hace nada
return(column)
}
else{
return(column_data_as_double)
}
}
dataset = apply(dataset, apply_to_columns, convert_columns)
max_variables = 5
convert_columns <- function(column){
#intentamos procesar la columna como double
column
column_data_as_double = as.double(as.character(column))
na_count = sum(is.na(column_data_as_double))
if(na_count > 0){
#la columna no es double. no se hace nada
return(column)
}
else{
return(column_data_as_double)
}
}
dataset = apply(dataset, apply_to_columns, convert_columns)
rm(list = ls());cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(ggplot2)
library(GGally)
library(reshape)
library(corrplot)
apply_to_rows = 1
apply_to_columns = 2
dataset = read.csv("crx.csv")
dataset[ (dataset == '?') ] = NA
dataset = na.omit(dataset)
summary(dataset)
max_variables = 5
convert_columns <- function(column){
#intentamos procesar la columna como double
column_data_as_double = as.double(as.character(column))
na_count = sum(is.na(column_data_as_double))
if(na_count > 0){
#la columna no es double. no se hace nada
return(column)
}
else{
return(column_data_as_double)
}
}
apply(dataset, apply_to_columns, convert_columns)
test = apply(dataset, apply_to_columns, convert_columns)
View(test)
summary(test)
summary(test)
is.numeric(test[1])
is.numeric(as.numeric(test[1]))
is.numeric(as.numeric(test[1]))
is.na(tst[1])
is.na(test[1])
is.na(test[1])
test[1]
test
test[1,]
test[,q]
test[,1]
is.na(test[1,])
is.na(test[,1])
is.numeric(as.numeric(test[,1]))
as.numeric(test[,1])
is.numeric(test[,1])
is.numeric(test[,2])
is.numeric(test[,3])
summary(test)
